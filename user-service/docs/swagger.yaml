
openapi: 3.0.0
info:
  title: User, Authentication, and Profile Management API
  version: 1.0.0
  description: API documentation for user profile management, authentication, breeder profiles, and address services.

paths:
  /profile:
    get:
      summary: "Get User Profile"
      description: "Fetches the profile of the authenticated user."
      tags: ["User"]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "User profile details"
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserId:
                    type: integer
                  Username:
                    type: string
                  FirstName:
                    type: string
                  LastName:
                    type: string
                  Phone:
                    type: string
                  Email:
                    type: string
                  Active:
                    type: boolean
                  UserRoleId:
                    type: integer
        "401":
          description: "Unauthorized access"

  /register:
    post:
      summary: "Register New User"
      description: "Registers a new user account."
      tags: ["User"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Username:
                  type: string
                Password:
                  type: string
                  format: password
                FirstName:
                  type: string
                LastName:
                  type: string
                Phone:
                  type: string
                Email:
                  type: string
              required:
                - Username
                - Password
                - FirstName
                - LastName
                - Phone
                - Email
      responses:
        "201":
          description: "User created successfully"
        "400":
          description: "Bad request or user already exists"

  /login:
    post:
      summary: "Login User"
      description: "Authenticates a user with username and password."
      tags: ["User"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Username:
                  type: string
                Password:
                  type: string
                  format: password
              required:
                - Username
                - Password
      responses:
        "200":
          description: "Login successful"
        "401":
          description: "Unauthorized or incorrect credentials"

  /logout:
    post:
      summary: "Logout User"
      description: "Logs out the authenticated user."
      tags: ["User"]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Logout successful"

  /forgot-password:
    post:
      summary: "Forgot Password"
      description: "Sends a password reset link to the user's email."
      tags: ["User"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Email:
                  type: string
              required:
                - Email
      responses:
        "200":
          description: "Password reset link sent"
        "404":
          description: "User not found"

  /reset-password/{token}:
    patch:
      summary: "Reset Password"
      description: "Resets a user's password using a token."
      tags: ["User"]
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Password:
                  type: string
                  format: password
              required:
                - Password
      responses:
        "201":
          description: "Password updated successfully"
        "401":
          description: "Invalid or expired token"

  /update-password:
    patch:
      summary: "Update Password"
      description: "Updates the authenticated user's password."
      tags: ["User"]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Password:
                  type: string
                  format: password
              required:
                - Password
      responses:
        "201":
          description: "Password updated successfully"

  /update-profile:
    patch:
      summary: "Update Profile"
      description: "Updates the authenticated user's profile."
      tags: ["User"]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Username:
                  type: string
                FirstName:
                  type: string
                LastName:
                  type: string
                Phone:
                  type: string
                Email:
                  type: string
                ProvinceCode:
                  type: string
                DistrictCode:
                  type: string
                WardCode:
                  type: string
                
              required:
                - Username
                - FirstName
                - LastName
                - Phone
                - Email
      responses:
        "201":
          description: "User profile updated successfully"

  /delete:
    delete:
      summary: "Delete Account"
      description: "Soft deletes the authenticated user's account."
      tags: ["User"]
      security:
        - bearerAuth: []
      responses:
        "201":
          description: "User deleted successfully"

  /auth/google:
    post:
      summary: "Google Authentication"
      description: "Authenticates a user via Google OAuth."
      tags: ["Auth"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Email:
                  type: string
                FirstName:
                  type: string
                LastName:
                  type: string
                GoogleId:
                  type: string
              required:
                - Email
                - GoogleId
      responses:
        "200":
          description: "Login successful or user registered"
        "409":
          description: "Email or Google ID conflict"
        "500":
          description: "Internal server error"

  /address/province:
    get:
      summary: "List Provinces"
      description: "Returns a list of all provinces."
      tags: ["Address"]
      responses:
        "200":
          description: "List of provinces"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                    name:
                      type: string

  /address/province/{code}:
    get:
      summary: "Get Province by Code"
      description: "Fetches details of a province by its code."
      tags: ["Address"]
      parameters:
        - in: path
          name: code
          schema:
            type: string
          required: true
          description: "Province code"
      responses:
        "200":
          description: "Province details"
        "404":
          description: "Province not found"

  /address/district:
    get:
      summary: "List Districts"
      description: "Returns a list of all districts."
      tags: ["Address"]
      responses:
        "200":
          description: "List of districts"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                    name:
                      type: string

  /address/district/{provinceId}:
    get:
      summary: "Get Districts by Province"
      description: "Fetches a list of districts by province ID."
      tags: ["Address"]
      parameters:
        - in: path
          name: provinceId
          schema:
            type: string
          required: true
          description: "Province ID"
      responses:
        "200":
          description: "List of districts"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                    name:
                      type: string

  /address/ward:
    get:
      summary: "List Wards"
      description: "Returns a list of all wards."
      tags: ["Address"]
      responses:
        "200":
          description: "List of wards"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                    name:
                      type: string

  /address/ward/{districtId}:
    get:
      summary: "Get Wards by District"
      description: "Fetches a list of wards by district ID."
      tags: ["Address"]
      parameters:
        - in: path
          name: districtId
          schema:
            type: string
          required: true
          description: "District ID"
      responses:
        "200":
          description: "List of wards"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                    name:
                      type: string

  /breeder/profile:
    get:
      summary: "Get Breeder Profile"
      description: "Fetches the profile details of the authenticated breeder."
      tags: ["Breeder"]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Breeder profile details"
          content:
            application/json:
              schema:
                type: object
                properties:
                  BreederId:
                    type: integer
                  FarmName:
                    type: string
                  Certificate:
                    type: string
                  About:
                    type: string
        "404":
          description: "Breeder profile not found"

  /manage/profile:
    get:
      summary: "Get All Profiles"
      description: "Returns a list of all user profiles. Requires admin/staff role."
      tags: ["Admin"]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "List of all user profiles"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    UserId:
                      type: integer
                    Username:
                      type: string
                    FirstName:
                      type: string
                    LastName:
                      type: string
        "403":
          description: "Forbidden access"

  /manage/profile/{id}:
    get:
      summary: "Get Profile by ID"
      description: "Fetches user profile by ID for admin/staff."
      tags: ["Admin"]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: "User ID"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "User profile details"
        "404":
          description: "User not found"
        "403":
          description: "Forbidden access"

  /manage/breeder/profile:
    get:
      summary: "List All Breeder Profiles"
      description: "Lists all breeder profiles."
      tags: ["Breeder Management"]
      responses:
        "200":
          description: "List of all breeder profiles"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    BreederId:
                      type: integer
                    FarmName:
                      type: string
                    Certificate:
                      type: string
                    About:
                      type: string
